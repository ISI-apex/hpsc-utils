# Relative paths to reduce duplication throughout this file
HPPS=hpps
RTPS=rtps
RTPS_R52=$(RTPS)/r52
RTPS_A53=$(RTPS)/a53
HPPS_ATF=$(HPPS)/arm-trusted-firmware
HPPS_UBOOT=$(HPPS)/u-boot
HPPS_LINUX=$(HPPS)/linux
HPPS_LINUX_BOOT=$(HPPS_LINUX)/arch/arm64/boot
HPPS_YOCTO=$(HPPS)/yocto
HPPS_BUSYBOX=$(HPPS)/busybox
RTPS_R52_UBOOT=$(RTPS_R52)/u-boot
RTPS_A53_UBOOT=$(RTPS_A53)/u-boot
RTPS_A53_ATF=$(RTPS_A53)/arm-trusted-firmware
BARE_METAL=hpsc-baremetal
HPSC_UTILS=hpsc-utils
HPPS_LINUX_TESTS=$(HPSC_UTILS)/test/linux

CONF_PROF=$(HPSC_UTILS)/conf
CONF_BASE=$(CONF_PROF)/base

PROF?=default

# Directory for artifacts created by this top-level build
BLD=bld
BLD_PROF=$(BLD)/prof/$(PROF)

# Toolchain for bare-metal. Ok if does not support for userspace, e.g.
# aarch64-linux- from pre-built toolchains distributed at kernel.org
CROSS_A53=aarch64-linux-gnu-
# Toolchain for Linux userspace
CROSS_A53_LINUX=aarch64-linux-gnu-
CROSS_R52=arm-none-eabi-
CROSS_M4=arm-none-eabi-

# Shortcut aliases
#
# Note: all clean targets here are hardest cleans, and all builds are full,
# e.g. including regeneration of config, if you want any other clean or partial
# build, then use the build system of the respective component directly.
#
# Note: Both 'prof' and 'all' build everything, but 'prof' is shallow, while
# 'all' is deep, i.e. 'all' forces invocation of nested builds, while 'prof' is
# not going to rebuild an artifact from a nested build if that artifact exists.

all: prof
clean: trch-clean rtps-clean hpps-clean prof-clean
.PHONY: all clean

trch: trch-bm
trch-clean: trch-bm-clean
.PHONY: trch trch-clean

rtps: rtps-r52 rtps-a53 rtps-r52-bm
rtps-clean: rtps-r52-clean rtps-a53-clean rtps-r52-bm-clean
.PHONY: rtps rtps-clean

# Note: can't have hpps-initramfs because the hpps-initramfs depends on the
# Linux build via a shallow target. We could remove hpps-linux from here and
# then depend on hpps-initramfs, but then hpps target won't be deep, and we
# want all these alias targets to be deep. We could add hpps-busybox to here,
# but since hpps-initramfs is not here, it would seem out-of-place. Also,
# hpps-initramfs would conflict with hpps-tests (potential multiple invocations
# of the nested build).
hpps: hpps-atf hpps-uboot hpps-linux hpps-tests
hpps-clean: hpps-atf-clean hpps-uboot-clean hpps-linux-clean
.PHONY: hpps hpps-clean

rtps-r52: rtps-r52-uboot rtps-r52-bm
rtps-r52-clean: rtps-r52-uboot-clean rtps-r52-bm-clean
.PHONY: rtps-r52 rtps-r52-clean

rtps-a53: rtps-a53-atf rtps-a53-uboot
rtps-a53-clean: rtps-a53-atf-clean rtps-a53-uboot-clean
.PHONY: rtps-a53 rtps-a53-clean

bm: trch-bm rtps-r52-bm
bm-clean: trch-bm-clean rtps-r52-bm-clean
.PHONY: bm bm-clean

$(BLD)/%/:
	mkdir -p "$@"
.PRECIOUS: $(BLD)/%/

# Invariant: artifacts have a unique recipe. That unique recipe may part of two
# different dependency trees: (A) the dependency tree for the user interface
# target (aka. an alias), or (B) the dependency tree of another artifact (e.g.
# a memory image). Also we have the requirement that rule for nested artifacts
# trigger the nested dependency build. This won't happen if the rule here
# depends on the artifact (the dep tree would be truncated at that artifact --
# if it exists, no recipe will be invoked, even if its dependencies in the
# nested tree are stale).
#
# This invariant plus the requirements determines the pattern: the recipe for
# invoking the nested dependency building for a nested artifact is associated
# with a phony target. Then, both the user-facing alias (case A) and the
# artifact (case B) both depend on that phony target. Most often there's no
# alias (case A) because the phony target is short enough to be user-facing.
#
# Another non-way to satisfy invariant+requirement would be to use only the
# phony targets for the artifacts here (i.e. eliminate Case B rule), but this
# hinders rule legibility because dependencies can no longer be explicit
# artifacts (they are phony targets) and the recipies can no longer refer to
# dependencies (e.g. via $<).

TRCH_BM_ARGS=CROSS_COMPILE=$(CROSS_M4)
$(BARE_METAL)/trch/Makefile.config: $(BLD_PROF)/trch/bm.config.mk
	cp $< $@
$(BARE_METAL)/trch/bld/trch.elf: $(BARE_METAL)/trch/Makefile.config
	$(MAKE) -C $(BARE_METAL)/trch $(TRCH_BM_ARGS) bld/trch.elf
trch-bm: $(BARE_METAL)/trch/Makefile.config
	$(MAKE) -C $(BARE_METAL)/trch $(TRCH_BM_ARGS)
trch-bm-clean:
	$(MAKE) -C $(BARE_METAL)/trch $(TRCH_BM_ARGS) clean
	rm -f $(BARE_METAL)/trch/Makefile.config
.PHONY: trch-bm trch-bm-clean

RTPS_R52_BM_ARGS=CROSS_COMPILE=$(CROSS_R52)
$(BARE_METAL)/rtps/Makefile.config: $(BLD_PROF)/rtps/bm.config.mk
	cp $< $@
$(BARE_METAL)/rtps/bld/rtps.uimg: $(BARE_METAL)/rtps/Makefile.config
	$(MAKE) -C $(BARE_METAL)/rtps $(RTPS_R52_BM_ARGS) bld/rtps.uimg
rtps-r52-bm: $(BARE_METAL)/rtps/Makefile.config
	$(MAKE) -C $(BARE_METAL)/rtps $(RTPS_R52_BM_ARGS)
rtps-r52-bm-clean:
	$(MAKE) -C $(BARE_METAL)/rtps $(RTPS_R52_BM_ARGS) clean
	rm -f $(BARE_METAL)/rtps/Makefile.config
.PHONY: rtps-r52-bm rtps-r52-bm-clean

RTPS_R52_UBOOT_ARGS=CROSS_COMPILE=$(CROSS_R52)
$(RTPS_R52_UBOOT)/.config: $(RTPS_R52_UBOOT)/configs/hpsc_rtps_r52_defconfig
	$(MAKE) -C $(RTPS_R52_UBOOT) $(RTPS_R52_UBOOT_ARGS) hpsc_rtps_r52_defconfig
$(RTPS_R52_UBOOT)/u-boot.bin: $(RTPS_R52_UBOOT)/.config
	$(MAKE) -C $(RTPS_R52_UBOOT) $(RTPS_R52_UBOOT_ARGS) u-boot.bin
rtps-r52-uboot: $(RTPS_R52_UBOOT)/.config
	$(MAKE) -C $(RTPS_R52_UBOOT) $(RTPS_R52_UBOOT_ARGS)
rtps-r52-uboot-clean:
	$(MAKE) -C $(RTPS_R52_UBOOT) $(RTPS_R52_UBOOT_ARGS) clean
	rm -f $(RTPS_R52_UBOOT)/.config
.PHONY: rtps-r52-uboot rtps-r52-uboot-clean

RTPS_A53_UBOOT_ARGS=CROSS_COMPILE=$(CROSS_A53)
$(RTPS_A53_UBOOT)/.config: $(RTPS_A53_UBOOT)/configs/hpsc_rtps_a53_defconfig
	$(MAKE) -C $(RTPS_A53_UBOOT) $(RTPS_A53_UBOOT_ARGS) hpsc_rtps_a53_defconfig
$(RTPS_A53_UBOOT)/u-boot.bin: $(RTPS_A53_UBOOT)/.config
	$(MAKE) -C $(RTPS_A53_UBOOT) $(RTPS_A53_UBOOT_ARGS) u-boot.bin
rtps-a53-uboot: $(RTPS_A53_UBOOT)/.config
	$(MAKE) -C $(RTPS_A53_UBOOT) $(RTPS_A53_UBOOT_ARGS)
rtps-a53-uboot-clean:
	$(MAKE) -C $(RTPS_A53_UBOOT) $(RTPS_A53_UBOOT_ARGS) clean
	rm -f $(RTPS_A53_UBOOT)/.config
.PHONY: rtps-a53-uboot rtps-a53-uboot-clean

RTPS_A53_ATF_ARGS=PLAT=hpsc_rtps_a53 DEBUG=1 CROSS_COMPILE=$(CROSS_A53)
$(RTPS_A53_ATF)/build/hpsc_rtps_a53/debug/bl31.bin:
	$(MAKE) -C $(RTPS_A53_ATF) $(RTPS_A53_ATF_ARGS) bl31
rtps-a53-atf:
	$(MAKE) -C $(RTPS_A53_ATF) $(RTPS_A53_ATF_ARGS) bl31
rtps-a53-atf-clean:
	$(MAKE) -C $(RTPS_A53_ATF) $(RTPS_A53_ATF_ARGS) clean
.PHONY: rtps-a53-atf rtps-a53-atf-clean

HPPS_ATF_ARGS=PLAT=hpsc DEBUG=1 CROSS_COMPILE=$(CROSS_A53)
$(HPPS_ATF)/build/hpsc/debug/bl31.bin:
	$(MAKE) -C $(HPPS_ATF) $(HPPS_ATF_ARGS) bl31
hpps-atf:
	$(MAKE) -C $(HPPS_ATF) $(HPPS_ATF_ARGS) bl31
hpps-atf-clean:
	$(MAKE) -C $(HPPS_ATF) $(HPPS_ATF_ARGS) clean
.PHONY: hpps-atf hpps-atf-clean

HPPS_UBOOT_ARGS=CROSS_COMPILE=$(CROSS_A53)
$(HPPS_UBOOT)/.config: $(HPPS_UBOOT)/configs/hpsc_hpps_defconfig
	$(MAKE) -C $(HPPS_UBOOT) $(HPPS_UBOOT_ARGS) hpsc_hpps_defconfig
$(HPPS_UBOOT)/u-boot.dtb: $(HPPS_UBOOT)/.config
	$(MAKE) -C $(HPPS_UBOOT) $(HPPS_UBOOT_ARGS) u-boot.dtb
$(HPPS_UBOOT)/u-boot-nodtb.bin: $(HPPS_UBOOT)/u-boot.dtb
	$(MAKE) -C $(HPPS_UBOOT) $(HPPS_UBOOT_ARGS) u-boot-nodtb.bin
$(HPPS_UBOOT)/u-boot.bin: $(HPPS_UBOOT)/u-boot-nodtb.bin
	$(MAKE) -C $(HPPS_UBOOT) $(HPPS_UBOOT_ARGS) u-boot.bin
hpps-uboot-clean:
	$(MAKE) -C $(HPPS_UBOOT) $(HPPS_UBOOT_ARGS) clean
	rm -f $(HPPS_UBOOT)/.config
hpps-uboot: $(HPPS_UBOOT)/.config
	$(MAKE) -C $(HPPS_UBOOT) $(HPPS_UBOOT_ARGS)
.PHONY: hpps-uboot hpps-uboot-clean

HPPS_LINUX_ARGS=ARCH=arm64 CROSS_COMPILE=$(CROSS_A53)
$(HPPS_LINUX)/.config: $(HPPS_LINUX)/arch/arm64/configs/hpsc_defconfig
	$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) hpsc_defconfig

$(HPPS_LINUX_BOOT)/Image: $(HPPS_LINUX)/.config
	$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) Image

# Note: the dependency on Image is in order to sequence the nested builds, to
# prevent nested builds running in parallel. We do want explicit references to
# both artifacts in this makefile though, because they both participate in
# images. Note: most images use the per-profile hpsc.dtb artifact built from
# merged static DT overlays; this target is mostly unused.
$(HPPS_LINUX_BOOT)/dts/hpsc/hpsc.dtb: $(HPPS_LINUX_BOOT)/Image
	$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) hpsc/hpsc.dtb
$(HPPS_LINUX)/modules.order: $(HPPS_LINUX_BOOT)/dts/hpsc/hpsc.dtb
	$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) modules

# The make command in this recipe is only used for the invocation from the user
# interface (via hpps-linux phony target shortcut), but not from the dependency
# build of another artifact, for which the above recipes are used (a violation
# of the invariant above). The non-phony rules (above) define a shallow
# dependency graph which is disconnected from the nested dependency graph
# (modifying kernel.c will not cause uImage to be remade).  Hence, the phony
# target (hpps-linux) below gives the user a convenience way to force the
# nested dependency build.
hpps-linux: $(HPPS_LINUX)/.config
	$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS)
hpps-linux-clean:
	$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) mrproper
.PHONY: hpps-linux hpps-linux-clean


HPPS_BUSYBOX_ARGS=CROSS_COMPILE=$(CROSS_A53_LINUX)
$(HPPS_BUSYBOX)/.config: $(CONF_BASE)/hpps/busybox/hpsc_hpps_miniconf
	$(MAKE) -C $(HPPS_BUSYBOX) $(HPPS_BUSYBOX_ARGS) \
		allnoconfig KCONFIG_ALLCONFIG="$(abspath $<)"
$(HPPS_BUSYBOX)/busybox: $(HPPS_BUSYBOX)/.config
	$(MAKE) -C $(HPPS_BUSYBOX) $(HPPS_BUSYBOX_ARGS) busybox
hpps-busybox: $(HPPS_BUSYBOX)/.config
	$(MAKE) -C $(HPPS_BUSYBOX) $(HPPS_BUSYBOX_ARGS)
hpps-busybox-clean:
	$(MAKE) -C $(HPPS_BUSYBOX) $(HPPS_BUSYBOX_ARGS) clean
	rm -f $(HPPS_BUSYBOX)/.config
.PHONY: hpps-busybox hpps-busybox-clean

# Targets that build a profile

include $(CONF_BASE)/Makefile # to not have each profile include it
include $(CONF_PROF)/$(PROF)/Makefile

prof-clean:
	rm -rf $(BLD_PROF)/{qemu,hpps,trch,rtps}
.PHONY: prof prof-clean

# Shortcuts (mostly due to legacy)
qrun: run-qemu
zrun: run-zebu
.PHONY: qrun zrun

run-%: prof | $(BLD_PROF)/run/%/
	export ROOT=$$PWD PROF=$(PROF) && cd $(BLD_PROF)/run/$* && \
		launch-$* -e $$ROOT/$(BLD_PROF)/target.sh \
			  -e $$ROOT/$(BLD_PROF)/$*/env.sh $(ARGS)
run-%-clean:
	rm -rf $(BLD_PROF)/run/$*/
.PHONY: run-% run-%-clean

# Merging rules. Each profile defines the inputs to merge as dependencies.

$(BLD_PROF)/%.dts $(BLD_PROF)/%.sh $(BLD_PROF)/%.config.mk %.conf:
	cat $^ > $@

$(BLD_PROF)/%.ini:
	merge-ini $^ > $@

$(BLD_PROF)/%.env:
	merge-env $^ > $@

$(BLD_PROF)/%.mem.map:
	merge-map $^ > $@

# Empty recipe to prevent above merge rules from matching initramfs
$(CONF_BASE)/hpps/linux/initramfs:
	
define NEWLINE


endef

IRF_FR=initramfs.fakeroot
$(BLD_PROF)/hpps/linux/initramfs.cpio: $(BLD_PROF)/hpps/linux/initramfs.sh \
	 $(HPPS_BUSYBOX)/busybox $(HPPS_LINUX)/modules.order
	$(foreach d,$(filter-out $(BLD_PROF)/hpps/linux/initramfs.sh \
				 $(HPPS_BUSYBOX)/busybox \
				 $(HPPS_LINUX)/modules.order,\
		                 $^),\
		rsync -aq $(d)/ $(@D)/initramfs$(NEWLINE))
	( cd $(@D)/initramfs && fakeroot -s ../$(IRF_FR) sh $(abspath $(@D)/initramfs.sh) )
	fakeroot -i $(@D)/$(IRF_FR) -s $(@D)/$(IRF_FR) \
		$(MAKE) -j1 -C $(HPPS_BUSYBOX) $(HPPS_BUSYBOX_ARGS) \
			CONFIG_PREFIX="$(abspath $(@D)/initramfs)" install
	fakeroot -i $(@D)/$(IRF_FR) -s $(@D)/$(IRF_FR) \
		$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) \
			INSTALL_MOD_PATH=$(abspath $(@D)/initramfs) modules_install
	cd $(@D)/initramfs && find . | fakeroot -i ../$(IRF_FR) -s ../$(IRF_FR) \
		cpio -R root:root -c -o -O "../$(@F)"

$(BLD_PROF)/hpps/linux/initramfs.uimg: $(BLD_PROF)/hpps/linux/initramfs.cpio.gz
	mkimage -T ramdisk -C gzip -A arm64 -n "Initramfs" -d "$<" "$@"

hpps-initramfs: $(BLD_PROF)/hpps/linux/initramfs.uimg
hpps-initramfs-clean:
	rm -rf $(BLD_PROF)/hpps/linux/initramfs{/,.uimg,.cpio,.cpio.gz,.fakeroot}
.PHONY: hpps-initramfs hpps-initramfs-clean

# We provide only a phony target, because shallow target would be awefully
# verbose and duplicating, because (1) needs explicit list of artifacts here
# (2) those artifacts need to be sequenced. No need for the shallow target.
HPPS_LINUX_TESTS_ARGS=CROSS_COMPILE=$(CROSS_A53_LINUX) CC=gcc
hpps-tests:
	$(MAKE) -C $(HPPS_LINUX_TESTS) $(HPPS_LINUX_TESTS_ARGS)
hpps-tests-clean:
	$(MAKE) -C $(HPPS_LINUX_TESTS) $(HPPS_LINUX_TESTS_ARGS) clean
.PHONY: hpps-tests hpps-tests-clean

ifeq ($(filter %-clean,$(MAKECMDGOALS)),)
-include $(BLD_PROF)/trch/prof.sram.mem.rule
-include $(BLD_PROF)/qemu/preload.prof.mem.rule
endif

$(BLD_PROF)/hpps/linux/uImage: $(HPPS_LINUX_BOOT)/Image.gz $(BLD_PROF)/hpps/conf.sh \
	| $(BLD_PROF)/hpps/linux/
	source $(BLD_PROF)/hpps/conf.sh && \
	mkimage -T kernel -C gzip -A arm64 -d "$<" -a $$HPPS_KERN_LOAD_ADDR "$@"

$(BLD_PROF)/hpps/u-boot/uboot.env.bin: $(BLD_PROF)/hpps/u-boot/uboot.env $(BLD_PROF)/hpps/conf.sh
	source $(BLD_PROF)/hpps/conf.sh && \
	mkenvimage -s $$HPPS_UBOOT_ENV_SIZE -o $@ $<

$(BLD_PROF)/trch/syscfg.bin: $(BLD_PROF)/trch/syscfg.ini
	cfgc -s $(BARE_METAL)/trch/syscfg-schema.json $< $@

$(BLD_PROF)/qemu/hpsc-arch.dtb: $(BLD_PROF)/qemu/hpsc-arch.dts
	$(call dt-rule,-I$(QEMU_DT))

$(BLD_PROF)/hpps/u-boot/hpsc-hpps.dtb: $(BLD_PROF)/hpps/u-boot/hpsc-hpps.dts
	$(call dt-rule,-I$(HPPS_UBOOT)/arch/arm/dts \
		-I$(HPPS_UBOOT)/arch/arm/dts/include -I$(HPPS_UBOOT)/include)

$(BLD_PROF)/hpps/linux/hpsc.dtb: $(BLD_PROF)/hpps/linux/hpsc.dts
	$(call dt-rule,-I$(HPPS_LINUX)/include -I$(HPPS_LINUX_BOOT)/dts/hpsc)

# Some aliases for convenience
YOCTO_IMG_DIR=tmp-glibc/deploy/images/hpsc-chiplet
YOCTO_STEM=$(BLD_PROF)/hpps/linux/yocto/$(YOCTO_IMG_DIR)/core-image-hpsc-hpsc-chiplet
hpps-rootfs-tar: $(YOCTO_STEM).tar.gz
hpps-rootfs: $(YOCTO_STEM).mod.nand.img

$(BLD_PROF)/hpps/linux/yocto/$(YOCTO_IMG_DIR)/core-image-hpsc-hpsc-chiplet.tar.gz: \
	$(BLD_PROF)/hpps/linux/yocto/conf/local.conf \
	$(BLD_PROF)/hpps/linux/yocto/conf/bblayers.conf \
	| $(BLD_PROF)/hpps/linux/yocto/conf/
	source $(HPPS_YOCTO)/poky/oe-init-build-env $(BLD_PROF)/hpps/linux/yocto && \
	bitbake core-image-hpsc

# Unfortunately, just having a permanent bblayers.conf configuration file with
# BBLAYERS list defined only works with absolute paths to layers, which we
# cannot have (using relative paths and symlinking the layer source directories
# into the build directory almost works, but breaks internal python imports).
YOCTO_LAYERS=\
	poky/meta \
	poky/meta-poky \
	poky/meta-yocto-bsp \
	meta-openembedded/meta-oe \
	meta-openembedded/meta-python \
	meta-hpsc/meta-hpsc-bsp \

$(BLD_PROF)/hpps/linux/yocto/conf/bblayers.conf:
	source $(HPPS_YOCTO)/poky/oe-init-build-env $(BLD_PROF)/hpps/linux/yocto \
	$(foreach layer,$(YOCTO_LAYERS),&& bitbake-layers add-layer $(abspath $(HPPS_YOCTO))/$(layer))

# Install modules to rootfs
RFS_FR=rootfs.fakeroot
$(BLD_PROF)/hpps/linux/%.mod.tar.gz: $(BLD_PROF)/hpps/linux/%.tar.gz
	rm -rf $(@D)/$*/*
	fakeroot -s $(@D)/$(RFS_FR) tar -C $(@D)/$*/ -xf $<
	fakeroot -i $(@D)/$(RFS_FR) -s $(@D)/$(RFS_FR) \
		$(MAKE) -C $(HPPS_LINUX) $(HPPS_LINUX_ARGS) \
			INSTALL_MOD_PATH=$(abspath $(@D)/$*) modules_install
	fakeroot -s $(@D)/$(RFS_FR) -s $(@D)/$(RFS_FR) tar -C $(@D)/$* -czf $@ .

# Create NAND memory image from rootfs archive
#
# Ideally, this would be done using a dedicated tool on the host, but no such
# tool exists and its nontrivial (it is not a matter of mounting a loop device,
# because the image file format is up to Qemu). So, we use Qemu as the tool.
$(BLD_PROF)/hpps/%.nand.bin: $(BLD_PROF)/hpps/linux/%.tar.gz
	$(MAKE) PROF=nand-writer prof-clean qrun-clean
	CONF_PROF=$(CONF_PROF) source $(CONF_PROF)/nand-writer/conf.sh && \
	qmp-mem-wait -p $$(ps -o ppid= $$$$) localhost $$QMP_PORT $$DONE_CPU $$DONE_ADDR $$DONE_PATTERN \
		qmp.py localhost $$QMP_PORT quit & \
	$(MAKE) PROF=nand-writer ARCHIVE=$(abspath $^) qrun
	cp $(BLD)/prof/nand-writer/qrun/hpps.nand.bin $@

# Extract ramoops buffer and parse binary ftrace data image into text
hpps-ramoops: $(BLD_PROF)/hpps/ramoops.txt
hpps-ramoops-clean:
	rm -f $(BLD_PROF)/hpps/ramoops.{bin,txt}
.PHONY: hpps-ramoops hpps-ramoops-clean

$(BLD_PROF)/hpps/ramoops.bin:
	source $(CONF_PROF)/ftrace-extractor/conf-ramoops.sh && \
	qmp.py localhost $$DUT_QMP_PORT pmemsave \
	    val=$$RAMOOPS_ADDR size=$$RAMOOPS_SIZE filename="\"$(abspath $@)\"" cpu-index=$$RAMOOPS_CPU

$(BLD_PROF)/hpps/ramoops.txt: $(BLD_PROF)/hpps/ramoops.bin
	$(MAKE) PROF=ftrace-extractor prof-clean
	CONF_PROF=$(CONF_PROF) source $(CONF_PROF)/ftrace-extractor/conf.sh && \
	qmp-mem-wait -p $$(ps -o ppid= $$$$) localhost $$QMP_PORT $$DONE_CPU $$DONE_ADDR $$DONE_PATTERN \
		$(CONF_PROF)/ftrace-extractor/dump-ramoops.sh $$QMP_PORT "$@" \&\& \
		qmp.py localhost $$QMP_PORT quit & \
	$(MAKE) PROF=ftrace-extractor RAMOOPS=$(abspath $^) qrun

# Zebu targets

# Note the empty recipe. Not sure why it does not work without it.
zebu-hpps: \
	$(BLD_PROF)/zebu/prof.hpps.dram.mem.raw \
	$(BLD_PROF)/zebu/prof.hpps.0.nand.raw \
	$(BLD_PROF)/zebu/prof.hpps.1.nand.raw
# Enable the following to also generate striped images (.bin or .vhex)
# zebu-hpps: $(BLD_PROF)/%/zebu/prof.hpps.ddr.x.bin
	
zebu-hpps-clean:
	rm -rf $(BLD_PROF)/zebu
.PHONY: zebu-hpps zebu-hpps-clean

ifeq ($(filter %-clean,$(MAKECMDGOALS)),)
ifneq ($(findstring zebu,$(MAKECMDGOALS)),)
-include $(BLD_PROF)/zebu/prof.hpps.dram.mem.rule
endif
endif

%.hpps.ddr.x.bin: ADDR_VAR=HPPS_DRAM_ADDR
%.hpps.ddr.x.bin: BANKS_VAR=HPPS_DRAM_BANKS

%.ddr.x.bin: %.dram.mem.bin %.conf.sh
	source $*.conf.sh && \
	memstripe --base $$$(ADDR_VAR) -i $< \
		$$(for i in $$(seq $$$(BANKS_VAR)); do echo $*.ddr.$$i.bin; done)
	touch $@

# Generic recipes re-used throughout the build

# Extract dependencies from a memory map file into a rule file
%.mem.dep: %.mem.map
	PROF=$(PROF) ROOT=. mkmemimg -l $< > $@

%.mem.rule: PARENT=$*.mem.bin
%.prof.mem.rule: PARENT=prof

%.mem.rule: %.mem.dep
	sed 's#^#$(PARENT): #' $< > $@

%.sram.mem.bin: TYPE=sram
%.dram.mem.bin: TYPE=dram

%.mem.bin: %.mem.map
	PROF=$(PROF) mkmemimg -t $(TYPE) $< $@

%.vhex: %.bin
	hpsc-objcopy -I binary -O Verilog-H $< $@

%.raw: %.bin
	ln -sf $(<F) $@

%.gz: %
	gzip -c -9 "$<" > "$@"

define dt-rule
	$(CC) -E -nostdinc -x assembler-with-cpp $(1) -o - $< | \
		dtc -q -I dts -O dtb -o $@ -
endef

%.dtb: %.dts
	$(call dt-rule,)

%.size: %
	stat -c '%s' $^ > $@

# Prevent deletion of intermediate artifacts
.SECONDARY:
