#!/bin/bash

set -e

run() {
    echo $@
    "$@"
}

extract_word() {
    IDX=$1
    shift
    local i=0
    for w in "$@"
    do
        if [ $i -eq $IDX ]
        then
            echo $w
            return
        fi
        i=$(($i + 1))
    done
}

parse_addr() {
    echo $1 | sed 's/_//g'
}

parse_size() {
    local s="$1"
    local mag=$(echo $s | sed 's/^\(0x\)\?[0-9]\+\([GMK]\)$/\2/')
    local sz=$(echo $s | sed 's/^\(0x\)\?\([0-9]\+\).*/\1\2/')
    case "$mag" in
    G) local sh=30 ;;
    M) local sh=20 ;;
    K) local sh=10 ;;
    esac
    echo $(($sz * (1<<$sh)))
}

hex() {
    printf "0x%x" $1
}

usage() {
    echo "Usage: $(basename $0) [-hl] map_file output_file"
    echo "       -l : only list input files"
    echo "       -h : usage information"
}

LIST_ONLY=0
while getopts "h?l?" o
do
    case "${o}" in
    l)
        LIST_ONLY=1
        ;;
    h)
        usage
        exit 0
        ;;
    *)
        usage 2>&1
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

if [ $# -lt 1 ]
then
    usage 2>&1
    exit 1
fi

MAP_FILE=$1
shift

if [ $LIST_ONLY -eq 0 ]
then
    if [ $# -ne 1 ]
    then
        usage 2>&1
        exit 1
    fi
    OUT_FILE=$1
    shift
fi

# Note: dd seek will be at this granularity
BLOCK_SIZE=4

declare -A SEGMENT_ADDRS
declare -A SEGMENT_FILES

BASE_ADDR=
SIZE=
line_num=0
while read line
do
    if [[ "$line" =~ ^\s*$ || "$line" =~ ^[[:space:]]*# ]]
    then
        continue
    fi

    KEY=$(extract_word 0 $line)
    ADDR_SPEC=$(extract_word 1 $line)
    TOK2=$(parse_addr $(extract_word 2 $line))

    if [[ -z "$ADDR_SPEC" || -z "$TOK2" ]]
    then
        echo "ERROR: syntax error on line $line_num" 1>&2
        exit 2
    fi

    REF_SEG=$(echo $ADDR_SPEC | sed -n 's/after(\([^)]\+\))/\1/p')
    if [ ! -z "${REF_SEG}" ]
    then
        REF_SEG_ADDR=${SEGMENT_ADDRS[${REF_SEG}]}
        REF_SEG_FILE=${SEGMENT_FILES[${REF_SEG}]}
        ADDR=$(hex $(($REF_SEG_ADDR + $(stat -c '%s' $REF_SEG_FILE))))
    else
        ADDR=$(parse_addr ${ADDR_SPEC})
    fi

    SEGMENT_ADDRS["$KEY"]="$ADDR"

    if [ "$KEY" = "mem" ]
    then
        if [ ! -z "$BASE_ADD" ]
        then
            echo "ERROR: duplicate mem spec: line $line_num" 1>&2
            exit 2
        fi
        BASE_ADDR=$ADDR
        SIZE_STR=$TOK2
        SIZE=$(parse_size $SIZE_STR)
        continue
    fi

    IN_FILE=$TOK2
    SEGMENT_FILES["$KEY"]="$IN_FILE"

    if [ $LIST_ONLY -eq 1 ]
    then
        echo "$IN_FILE"
        continue
    fi

    if [ -z $OUTPUT_READY ]
    then
        if [ -z "$SIZE" ]
        then
            echo "ERROR: file specs begin before mem spec" 1>&2
            exit 2
        fi
        run truncate --size=$SIZE_STR $OUT_FILE
        OUTPUT_READY=1
    fi

    OFFSET=$(($ADDR - $BASE_ADDR))

    SEEK=$(($OFFSET/$BLOCK_SIZE))
    # dd doesn't accept hex, but we want a hex printout
    echo DD off=$(hex $OFFSET) bs=$(hex $BLOCK_SIZE) seek=$(hex $SEEK) if=$IN_FILE
    run dd if=$IN_FILE of=$OUT_FILE bs=$BLOCK_SIZE seek=$SEEK conv=notrunc
    line_num=$(($line_num + 1))
done < $MAP_FILE

cleanup() {
    if [ $LIST_ONLY -eq 0 ]
    then
        return
    fi
    rm -f $OUT_FILE
}

trap cleanup ERR
